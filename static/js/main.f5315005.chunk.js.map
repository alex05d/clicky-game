{"version":3,"sources":["components/Header/index.js","components/Game/index.js","components/Wrapper/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","id","class","score","topScore","Game","alt","name","src","image","onClick","checkClick","clicked","Wrapper","children","Footer","App","state","images","shuffle","map","sort","Math","random","setState","alreadyClick","this","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ogSA+BeA,MA5Bf,SAAgBC,GAEZ,OACI,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,mBAAmBC,GAAG,WACjC,4BACI,wBAAIA,GAAG,QAAO,uBAAGC,MAAM,uBAAvB,gBACA,wBAAID,GAAG,SAAP,UAAuBF,EAAMI,MAA7B,iBAAkDJ,EAAMK,YAGhE,yBAAKJ,UAAU,oCAAoCC,GAAG,UAClD,yBAAKD,UAAU,yBACX,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,iCAAiCC,GAAG,aAC/C,4CACA,yGAEJ,yBAAKD,UAAU,e,qBCFxBK,MAhBf,SAAcN,GACV,OACI,yBAAKC,UAAU,qBACX,yBAAKA,UAAU,iBACX,yBACIM,IAAKP,EAAMQ,KACXC,IAAKT,EAAMU,MACXR,GAAIF,EAAME,GACVS,QAAS,kBAAMX,EAAMY,WAAWZ,EAAME,GAAIF,EAAMa,e,MCJrDC,MAJf,SAAiBd,GACb,OAAO,yBAAKC,UAAU,WAAYD,EAAMe,W,MCU7BC,MAXf,WAEI,OACI,yBAAKb,MAAM,4CAA4CD,GAAG,cACtD,4BACI,uBAAGC,MAAM,uBADb,WCkFGc,E,2MA/EbC,MAAQ,CACNd,MAAO,EACPC,SAAU,EACVQ,SAAS,EACTM,U,EAIFC,QAAU,SAAClB,GACT,IAAMiB,EAAS,EAAKD,MAAMC,OAAOE,KAAI,SAAAX,GAOnC,OANIA,EAAMR,KAAOA,EACfQ,EAAMG,SAAU,EAGhBH,EAAMG,SAAU,EAEXH,KAGTS,EAAOG,MAAK,iBAAM,GAAKC,KAAKC,YAC5B,EAAKC,SAAS,CAAEN,Y,EAKlBP,WAAa,SAACV,EAAIwB,GAGXA,GAgBH,EAAKD,SAAS,CAAErB,MAAO,EAAKc,MAAMd,MAAQ,IAC1C,EAAKgB,QAAQlB,KAhBT,EAAKgB,MAAMd,OAAS,EAAKc,MAAMb,UACjC,EAAKoB,SAAS,CAAEpB,SAAU,EAAKa,MAAMb,SAAW,IAChD,EAAKoB,SAAS,CAAErB,MAAO,EAAKc,MAAMd,MAAQ,KAI1C,EAAKqB,SAAS,CAAErB,MAAO,EAAKc,MAAMd,MAAQ,IAK5C,EAAKgB,QAAQlB,K,wEAWP,IAAD,OAEP,OACE,yBAAKD,UAAU,OACb,kBAAC,EAAD,CACEG,MAAOuB,KAAKT,MAAMd,MAClBC,SAAUsB,KAAKT,MAAMb,WAEvB,kBAAC,EAAD,KACE,yBAAKJ,UAAU,SACZ0B,KAAKT,MAAMC,OAAOE,KAAI,SAAAX,GAAK,OAC1B,kBAAC,EAAD,CACER,GAAIQ,EAAMR,GACV0B,IAAKlB,EAAMR,GACXQ,MAAOA,EAAMA,MACbG,QAASH,EAAMG,QACfD,WAAY,EAAKA,kBAKzB,kBAAC,EAAD,W,GA1EUiB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f5315005.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header(props) {\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <nav className=\"navbar fixed-top\" id=\"top-nav\">\r\n                <ul>\r\n                    <li id=\"logo\"><i class=\"fab fa-react fa-1x\"></i> Clicky Game</li>\r\n                    <li id=\"score\">Score: {props.score} | Top Score: {props.topScore}</li>\r\n                </ul>\r\n            </nav>\r\n            <div className=\"container-fluid text-align-center\" id=\"banner\">\r\n                <div className=\"row text-align-center\">\r\n                    <div className=\"row text-align-center\">\r\n                        <div className=\"col-2\"></div>\r\n                        <div className=\"col-8   justify-content-center\" id=\"bannerTag\">\r\n                            <h1>Clicky Game!</h1>\r\n                            <h4>Click on an image to earn points, but don't click on any more than once!</h4>\r\n                        </div>\r\n                        <div className=\"col-2\"></div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Header;\r\n\r\n","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nfunction Game(props) {\r\n    return (\r\n        <div className=\"card hover-shadow\">\r\n            <div className=\"img-container\">\r\n                <img\r\n                    alt={props.name}\r\n                    src={props.image}\r\n                    id={props.id}\r\n                    onClick={() => props.checkClick(props.id, props.clicked)}\r\n                // onClick={() => props.shuffle(props.id)}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper\" >{props.children}</div>\r\n}\r\n\r\nexport default Wrapper;","import React from 'react';\r\nimport './Footer.css';\r\n\r\nfunction Footer() {\r\n\r\n    return (\r\n        <nav class=\"navbar fixed-bottom navbar-light bg-light\" id=\"bottom-nav\">\r\n            <h4>\r\n                <i class=\"fab fa-react fa-1x\"></i>React\r\n            </h4>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport Header from './components/Header/index';\nimport './App.css';\nimport images from \"../src/images.json\";\nimport Game from \"./components/Game/index\";\nimport Wrapper from \"./components/Wrapper/index\";\nimport Footer from \"./components/Footer/index\";\n\nclass App extends Component {\n\n  state = {\n    score: 0,\n    topScore: 0,\n    clicked: false,\n    images,\n  };\n\n\n  shuffle = (id) => {\n    const images = this.state.images.map(image => {\n      if (image.id === id) {\n        image.clicked = true;\n      } else {\n\n        image.clicked = false;\n      }\n      return image;\n    });\n    //this function uses the sort method to shuffle the cards\n    images.sort(() => .5 - Math.random());\n    this.setState({ images });\n  }\n\n\n\n  checkClick = (id, alreadyClick) => {\n\n    // if the component has not been clicked \n    if (!alreadyClick) {\n      if (this.state.score >= this.state.topScore) {\n        this.setState({ topScore: this.state.topScore + 1 })\n        this.setState({ score: this.state.score + 1 })\n\n      } else {\n\n        this.setState({ score: this.state.score + 1 })\n      }\n\n      // change clicked to true\n      // call shuffle function\n      this.shuffle(id);\n\n    } else {\n\n      this.setState({ score: this.state.score = 0 })\n      this.shuffle(id);\n    }\n  }\n\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Header\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <Wrapper>\n          <div className=\"cards\">\n            {this.state.images.map(image => (\n              <Game\n                id={image.id}\n                key={image.id}\n                image={image.image}\n                clicked={image.clicked}\n                checkClick={this.checkClick}\n              />\n            ))}\n          </div>\n        </Wrapper>\n        <Footer />\n      </div>\n    )\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}